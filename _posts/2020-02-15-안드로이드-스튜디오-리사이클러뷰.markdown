---
layout: post
title:  "안드로이드 스튜디오 리사이클러뷰"
date:   2020-02-15 09:24:13
description: 리사이클러뷰
categories: 
comments: true
- blog
- programming
- java
---

안드로이드 스튜디오 리사이클러뷰
***
**리사이클러뷰** : 리스트뷰가 훨씬 유연해지고 개선된 버전이다. 많은 수의 데이터들을 한 화면에 보다 유연하게 출력할 수 있다.

리사이클러뷰는 레이아웃매니저(LayoutManager)에서 제공하는 뷰로 화면을 채운다.
***
**레이아웃 매니저**
***
- 리니어(LinearLayoutManager): 수평이나 수직으로 아이템 배열

- 그리드(GridLayoutManager): 격자형태로 아이템 배열

- 스태거드그리드(StaggeredGridLayout): 비틀린 격자형태로 아이템 배열
***
**메인엑티비티에 리사이클러뷰 추가하기**
***
    <android.support.v7.widget.RecyclerView
	    android:id="@+id/recycler_view"
	    android:scrollbars="vertical"
	    android:layout_width="match_parent"
	    android:layout_height="match_parent"/>

***
**메인엑티비티에 아이템 위젯 추가하기**
***
    <?xml version="1.0" encoding="utf-8"?> 
	    <android.support.constraint.ConstraintLayout 
		    xmlns:android="http://schemas.android.com/apk/res/android"  
			android:layout_width="match_parent"  
		    android:layout_height="wrap_content">  
    
	    <TextView  
		    android:layout_width="wrap_content"  		
		    android:layout_height="wrap_content"  
		    android:id="@+id/text_view" 
		    android:textSize="32sp"/>
		    
	 </android.support.constraint.ConstraintLayout>

***
**어댑터 추가하기**
***

**메서드**

**onCreateViewHolder** (ViewGroup parent, int viewType) : viewType 형태의 아이템 뷰를 위한 뷰홀더 객체 생성.

**onBindViewHolder**(ViewHolder holder, int position) : position에 해당하는 데이터를 뷰홀더의 아이템뷰에 표시.

**getItemCount**() : 전체 아이템 갯수 리턴.

    **public class SimpleTextAdapter extends RecyclerView.Adapter<SimpleTextAdapter.ViewHolder> {

    private ArrayList<String> mData = null ;

    // 아이템 뷰를 저장하는 뷰홀더 클래스.
    public class ViewHolder extends RecyclerView.ViewHolder {
        TextView textView1 ;

        ViewHolder(View itemView) {
            super(itemView) ;

            // 뷰 객체에 대한 참조. (hold strong reference)
            textView1 = itemView.findViewById(R.id.text1) ;
        }
    }

    // 생성자에서 데이터 리스트 객체를 전달받음.
    SimpleTextAdapter(ArrayList<String> list) {
        mData = list ;
    }

    // onCreateViewHolder() - 아이템 뷰를 위한 뷰홀더 객체 생성하여 리턴.
    @Override
    public SimpleTextAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        Context context = parent.getContext() ;
        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE) ;

        View view = inflater.inflate(R.layout.recyclerview_item, parent, false) ;
        SimpleTextAdapter.ViewHolder vh = new SimpleTextAdapter.ViewHolder(view) ;

        return vh ;
    }

    // onBindViewHolder() - position에 해당하는 데이터를 뷰홀더의 아이템뷰에 표시.
    @Override
    public void onBindViewHolder(SimpleTextAdapter.ViewHolder holder, int position) {
        String text = mData.get(position) ;
        holder.textView1.setText(text) ;
    }

    // getItemCount() - 전체 데이터 갯수 리턴.
    @Override
    public int getItemCount() {
        return mData.size() ;
	    }
    }

 ***
 **리사이클러뷰 레이아웃매니저 지정하기**
 ***
 public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        ...

        // 데이터리스트 생성.
        ArrayList<String> list = new ArrayList<>();
        for (int i=0; i<100; i++) {
            list.add(String.format("TEXT %d", i)) ;
        }

        // LinearLayoutManager 지정
        RecyclerView recyclerView = findViewById(R.id.recycler1) ;
        recyclerView.setLayoutManager(new LinearLayoutManager(this)) ;

        // SimpleTextAdapter객체 지정
        SimpleTextAdapter adapter = new SimpleTextAdapter(list) ;
        recyclerView.setAdapter(adapter) ;
    }